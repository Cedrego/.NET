@page "/info_corredores"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject LaboratorioNET.Services.FirebaseService FirebaseService
@using LaboratorioNET.Entities

<PageTitle>Información Corredores</PageTitle>

<div class="page">
    <div class="container-box">
        <aside class="sidebar">
            <h2>SportEvent<br />Manager,</h2>
        </aside>

        <main class="content">
            <h1 class="title">Información de Corredores</h1>

            @if (isLoading)
            {
                <div class="loading-container">
                    <p>Cargando datos...</p>
                </div>
            }
            else
            {
                <div class="info-section">
                    <p><strong>Carrera:</strong></p>
                    <select class="combo-carrera" @onchange="OnCarreraChange">
                        <option value="">Todas las carreras</option>
                        @foreach (var carrera in carreras)
                        {
                            <option value="@carrera.IdCarrera">@carrera.Nombre</option>
                        }
                    </select>

                    <p><strong>Origen:</strong></p>
                    <select class="combo-carrera" @onchange="OnOrigenChange">
                        <option value="">Todos los orígenes</option>
                        @foreach (var origen in origenes)
                        {
                            <option value="@origen">@origen</option>
                        }
                    </select>

                    <button class="btn-filtrar" @onclick="AplicarFiltros">Aplicar Filtros</button>
                    <button class="btn-limpiar" @onclick="LimpiarFiltros">Limpiar Filtros</button>
                </div>

                <h3>Corredores: (@corredoresFiltrados.Count)</h3>
                
                @if (corredoresFiltrados.Any())
                {
                    <table class="info-table">
                        <thead>
                            <tr>
                                <th>Documento</th>
                                <th>Nombre</th>
                                <th>Origen</th>
                                <th>Teléfono</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var corredor in corredoresFiltrados)
                            {
                                <tr>
                                    <td>@corredor.DocumentoIdentidad</td>
                                    <td>@corredor.Nombre</td>
                                    <td>@corredor.Nacionalidad</td>
                                    <td>@corredor.Telefono</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-data">
                        <p>No se encontraron corredores con los filtros seleccionados.</p>
                    </div>
                }
            }
        </main>
    </div>
</div>

<style>
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    background-color: #79c9e0;
}

.page {
    background-color: #79c9e0;
    background: #79c9e0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px 0;
}

.container-box {
    display: flex;
    background-color: #79c9e0;
    background: #79c9e0;
    border: 2px solid #79c9e0;
    border-radius: 20px;
    width: 95%;
    min-height: 90vh;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

.sidebar {
    background-color: #efefef;
    border-right: 2px solid #79c9e0;
    border-radius: 20px 0 0 20px;
    width: 25%;
    min-width: 220px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 22px;
    font-weight: bold;
}

.content {
    flex: 1;
    background-color: #efefef;
    border-radius: 0 20px 20px 0;
    padding: 40px;
    overflow-y: auto;
}

.title {
    text-align: center;
    font-weight: bold;
    border-bottom: 2px solid #000;
    margin-bottom: 25px;
    padding-bottom: 10px;
    font-size: 24px;
}

.info-section {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.info-section p {
    margin: 8px 0 4px 0;
    font-size: 15px;
    font-weight: bold;
}

.combo-carrera {
    width: 100%;
    padding: 8px 12px;
    margin-bottom: 15px;
    border: 1px solid #999;
    border-radius: 5px;
    font-size: 14px;
    background-color: #fff;
}

.combo-carrera:focus {
    outline: none;
    border-color: #79c9e0;
    box-shadow: 0 0 5px rgba(121, 201, 224, 0.5);
}

.btn-filtrar, .btn-limpiar {
    padding: 10px 20px;
    margin-right: 10px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s;
}

.btn-filtrar {
    background-color: #6da571;
    color: white;
}

.btn-filtrar:hover {
    background-color: #578a5b;
}

.btn-limpiar {
    background-color: #999;
    color: white;
}

.btn-limpiar:hover {
    background-color: #777;
}

h3 {
    font-size: 18px;
    font-weight: bold;
    margin-top: 25px;
    margin-bottom: 15px;
    color: #333;
}

.info-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 25px;
    background-color: #fff;
    border: 1px solid #999;
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.info-table thead {
    background-color: #d5d2f3;
}

.info-table th,
.info-table td {
    border: 1px solid #999;
    padding: 12px 8px;
    text-align: center;
    font-size: 14px;
}

.info-table th {
    font-weight: bold;
    color: #333;
}

.info-table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

.info-table tbody tr:hover {
    background-color: #e8e8e8;
}

.loading-container {
    text-align: center;
    padding: 50px;
    font-size: 18px;
    color: #666;
}

.no-data {
    text-align: center;
    padding: 40px;
    background-color: #fff;
    border-radius: 10px;
    margin-top: 20px;
}

.no-data p {
    color: #666;
    font-size: 16px;
}
</style>

@code {
    private bool isLoading = true;
    private List<Corredor> todosCorredores = new();
    private List<Corredor> corredoresFiltrados = new();
    private List<Carrera> carreras = new();
    private List<string> origenes = new();

    // Filtros seleccionados
    private string? carreraSeleccionada = null;
    private string? origenSeleccionado = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Cargar todos los datos en paralelo
            var tareaCorredores = FirebaseService.ObtenerTodosCorredoresAsync();
            var tareaCarreras = FirebaseService.ObtenerTodasCarrerasAsync();
            var tareaOrigenes = FirebaseService.ObtenerOrigenesUnicosAsync();

            await Task.WhenAll(tareaCorredores, tareaCarreras, tareaOrigenes);

            todosCorredores = await tareaCorredores;
            carreras = await tareaCarreras;
            origenes = await tareaOrigenes;

            // Mostrar todos los corredores inicialmente
            corredoresFiltrados = todosCorredores;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnCarreraChange(ChangeEventArgs e)
    {
        carreraSeleccionada = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : e.Value.ToString();
    }

    private void OnOrigenChange(ChangeEventArgs e)
    {
        origenSeleccionado = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : e.Value.ToString();
    }

    private async Task AplicarFiltros()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            corredoresFiltrados = await FirebaseService.ObtenerCorredoresFiltradosAsync(
                carreraSeleccionada,
                origenSeleccionado
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al aplicar filtros: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LimpiarFiltros()
    {
        carreraSeleccionada = null;
        origenSeleccionado = null;
        
        corredoresFiltrados = todosCorredores;
        StateHasChanged();
    }
}
