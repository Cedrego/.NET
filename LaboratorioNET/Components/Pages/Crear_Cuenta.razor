@page "/crear_cuenta"
@rendermode InteractiveServer
@using LaboratorioNET.Entities
@using LaboratorioNET.Services 
@inject NavigationManager NavigationManager
@inject FirebaseService FirebaseService

<PageTitle>Crear Cuenta</PageTitle>

<!-- Contenedor principal -->
<div class="main-container">

    <!-- Encabezado -->
    <header class="page-title-box">
        <h1>SportEvent Manager</h1>
    </header>

    <!-- Caja central -->
    <div class="menu-box">
        <h2>Crear Cuenta</h2>

        <div class="form-container">

            <!-- Nombre -->
            <p><strong>Nombre completo:</strong></p>
            <InputText @bind-Value="nombre" class="form-input" />

            <!-- Correo -->
            <p><strong>Correo electrónico:</strong></p>
            <InputText @bind-Value="correo" class="form-input" type="email" />

            <!-- Contraseña -->
            <p><strong>Contraseña:</strong></p>
            <InputText @bind-Value="contrasena" class="form-input" type="password" />

            <!-- Fecha de nacimiento -->
            <p><strong>Fecha de nacimiento:</strong></p>
            <InputDate @bind-Value="fechaNacimiento" class="form-input" />

            <!-- Nacionalidad -->
            <p><strong>Nacionalidad:</strong></p>
            <InputSelect @bind-Value="nacionalidad" class="form-input">
                @foreach (var pais in paises)
                {
                    <option value="@pais">@pais</option>
                }
            </InputSelect>

            <!-- Cédula -->
            <p><strong>Cédula:</strong></p>
            <InputText @bind-Value="documentoIdentidad" class="form-input" />

            <!-- Botón -->
            <br><br>
            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <p style="color:red;">@mensajeError</p>
            }
            <button type="button" class="submit-button" @onclick="CrearCuenta">Crear cuenta</button>
        </div>
    </div>
</div>

@code {
    // Campos del formulario
    private string documentoIdentidad = string.Empty;
    private string nombre = string.Empty;
    private string correo = string.Empty;
    private string contrasena = string.Empty;
    private DateTime? fechaNacimiento = null;
    private string nacionalidad = string.Empty;

    private string mensajeError = string.Empty;
    private bool estaCargando = false;

    private List<string> paises = new()
    {
        "Uruguay", "Argentina", "Chile", "Brasil", "Paraguay", "Perú", "México", "España"
    };

    private async Task CrearCuenta()
    {
        mensajeError = string.Empty;

        // === 1. Validaciones ===
        if (string.IsNullOrWhiteSpace(documentoIdentidad))
            mensajeError = "El campo Documento de Identidad está vacío.";
        else if (string.IsNullOrWhiteSpace(nombre))
            mensajeError = "El campo Nombre está vacío.";
        else if (string.IsNullOrWhiteSpace(correo))
            mensajeError = "El campo Correo está vacío.";
        else if (string.IsNullOrWhiteSpace(contrasena))
            mensajeError = "El campo Contraseña está vacío.";
        else if (fechaNacimiento == null)
            mensajeError = "Debe ingresar una Fecha de Nacimiento.";
        else if (string.IsNullOrWhiteSpace(nacionalidad))
            mensajeError = "Debe ingresar una Nacionalidad.";

        if (!string.IsNullOrWhiteSpace(mensajeError))
        {
            StateHasChanged();
            return;
        }

        estaCargando = true;
        StateHasChanged();

        // === 2. Crear objeto Corredor ===
        var nuevoCorredor = new Corredor
        {
            DocumentoIdentidad = documentoIdentidad,
            Nombre = nombre,
            Correo = correo,
            Contraseña = contrasena,
            FechaNacimiento = fechaNacimiento?.ToString("yyyy-MM-dd") ?? "",
            Nacionalidad = nacionalidad
        };

        // === 3. Guardar en Firebase ===
        try
        {
            await FirebaseService.Corredores.AddAsync(nuevoCorredor);
            mensajeError = $"✅ ¡Cuenta creada con éxito para {nuevoCorredor.Nombre}!";
            ResetearCampos();
        }
        catch (Exception ex)
        {
            mensajeError = $"❌ Error al guardar: {ex.Message}";
            Console.WriteLine($"[ERROR FIREBASE]: {ex}");
        }

        estaCargando = false;
        StateHasChanged();
    }

    private void ResetearCampos()
    {
        documentoIdentidad = string.Empty;
        nombre = string.Empty;
        correo = string.Empty;
        contrasena = string.Empty;
        fechaNacimiento = null;
        nacionalidad = string.Empty;
    }
}